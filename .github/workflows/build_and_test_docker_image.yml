name: Build and Test Credential Helper Docker Image

on:
  push:
    branches: [ test-workflow-behavior-on-push-and-tag ]

env:
  REGISTRY: ${{secrets.REGISTRY}}
  STAGING_REPOSITORY: ${{secrets.STAGING_REPOSITORY}}
  AWS_REGION: us-east-1

permissions:
    contents: read
    packages: write
    id-token: write   # This is required for requesting the JWT for AWS authentication

jobs:
  build-and-push:
    name: Build Docker Images
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: amd64
          - os: ubuntu-24.04-arm
            platform: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.GH_ACCESS_ROLE }} 
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker_image_resources/Dockerfile
          platforms: linux/${{ matrix.platform }}
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.STAGING_REPOSITORY }}:${{ github.sha }}-${{ matrix.platform }}
          provenance: false # provenance must be disabled in order to prevent manifest creation failures 

  test-and-scan:
    name: Test and Scan Docker Images
    needs: build-and-push
    strategy:
      matrix:
        include:
          - os: ubuntu-24.04
            platform: amd64
          - os: ubuntu-24.04-arm
            platform: arm64 
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502
        with:
          role-to-assume: ${{ secrets.GH_ACCESS_ROLE }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Set up test environment
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.STAGING_REPOSITORY }}:${{ github.sha }}-${{matrix.platform}}
            
          echo "REPOSITORY=${{ env.STAGING_REPOSITORY }}" >> $GITHUB_ENV

          mkdir -p docker_image_resources/tests/certs
          
          # Generate private key
          openssl genrsa -out docker_image_resources/tests/certs/private_key.pem 2048
          
          # Create CSR (Certificate Signing Request)
          openssl req -new -key docker_image_resources/tests/certs/private_key.pem \
            -out /tmp/certificate.csr \
            -subj "/CN=credential-helper-test/O=Amazon/OU=Cryptography"
          
          # Convert CSR to base64 for AWS CLI
          CSR_CONTENT=$(cat /tmp/certificate.csr | base64 -w 0)
          
          # Issue certificate using AWS Private CA
          CERTIFICATE_RESPONSE=$(aws acm-pca issue-certificate \
            --certificate-authority-arn ${{ secrets.PCA_ARN }} \
            --csr $CSR_CONTENT \
            --signing-algorithm "SHA256WITHRSA" \
            --validity Value=1,Type=DAYS \
            --output json)
          
          CERTIFICATE_ARN=$(echo $CERTIFICATE_RESPONSE | jq -r '.CertificateArn')

          aws acm-pca wait certificate-issued --certificate-authority-arn ${{ secrets.PCA_ARN }} --certificate-arn $CERTIFICATE_ARN
          
          # Get the issued certificate
          CERTIFICATE=$(aws acm-pca get-certificate \
            --certificate-authority-arn ${{ secrets.PCA_ARN }} \
            --certificate-arn $CERTIFICATE_ARN \
            --output json)
          
          # Write certificate directly to file
          jq -r '.Certificate' <<< "$CERTIFICATE" > docker_image_resources/tests/certs/certificate.pem
          
      - name: Test the ${{matrix.platform}} Docker Image
        env:
          TRUST_ANCHOR_ARN : ${{ secrets.TRUST_ANCHOR_ARN }}
          PROFILE_ARN: ${{ secrets.PROFILE_ARN }}
          ROLE_ARN : ${{ secrets.TESTING_ROLE_ARN }}
          VERSION : ${{ github.sha }}-${{matrix.platform}}
        run: |
          # Run basic version test
          echo "Testing version command:"
          docker run --rm ${{ env.REGISTRY }}/${{ env.STAGING_REPOSITORY }}:${{ github.sha }}-${{matrix.platform}} version

          # Run Integration Tests 
          cd docker_image_resources
          ./tests/run-tests.sh
          
      - name: Install Trivy Image Scanner 
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          cache: true
          version: v0.63.0

      - name: Scan Docker image with Trivy
        run: |
          IMAGE_REFERENCE="${{ env.REGISTRY }}/${{ env.STAGING_REPOSITORY }}:${{ github.sha }}-${{matrix.platform}}"
          
          # Run Trivy scan and capture JSON output directly
          echo "Generating JSON scan results..."
          echo "SCAN_OUTPUT=$(trivy image --ignorefile docker_image_resources/tests/.trivyignore --no-progress --severity CRITICAL,HIGH,MEDIUM,LOW $IMAGE_REFERENCE --format json)" >> $GITHUB_ENV

          ./docker_image_resources/tests/scripts/scan-image.sh
